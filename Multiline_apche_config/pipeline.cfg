# input{
#     file{
#         path=>"/Users/pratyushshishodiya/Desktop/logstash-8.3.3/event-data/apache-*.log"
#         type=>"access"
#         start_position=>"beginning"
        
#     }
#     file{
#         path=>"/Users/pratyushshishodiya/Desktop/logstash-8.3.3/event-data/java_errors.log"
#         start_position=>"beginning"
#         codec=>multiline{
#             pattern=>"^(\s+|\t)|(Caused by:)"
#             what=>"previous"
#         }
        
#     }
# }


# filter{
#     if [header][request_path]=~"error" or [path]=~"errors"{
#         mutate {
#             replace => {type=>"error"}
#         }

#     } else{
#         mutate{
#             replace=> {type=>"access"}
#         }
#         grok{
#             match => { "message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"' }
            
#         }

#         if "_grokparsefailure" in [tags]{
#             drop{ }
#         }

#         useragent{
#             source => "agent"
#             target => "ua"
#         }

#         #adminpage
#         if [request]=~ /^\/admin\//{
#             drop { }
#         }

#         #staticpage
#         if [request]=~ /^\/js\// or [request]=~ /^\/css\// or [request] in ["/robot.txt","/favicon.ico"] {
#             drop { }
#         }

#         #crawler
#         if [ua][device] == "spider"{
#             drop { }
#         }

#         mutate{
#             convert=>{
#                 "response"=>"integer"
#                 "bytes"=>"integer"
#             }
#         }
#         date {
# 			match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
# 			remove_field => [ "timestamp" ]
# 		}
#         geoip {
# 			source => "clientip"
#             ecs_compatibility => disabled
# 		}
#         #if "_geoip_lookup_failure" in [tags]{
#         #    drop{ }
#         #}
#     }  

#     mutate{
#         remove_field=>["headers","@version","host"]
#     }  
# }


# output{
#     if [type]=~"access"{
#         elasticsearch{
#             hosts => ["http://localhost:9200"]
#             #index=> "apacheaccess"
#             #index => "%{type}-%{+YYYY.MM.dd}"
#             document_type=>"default"
#             http_compression=>true
#         }
#     }else{
#         stdout{
#             codec=>rubydebug
#         }
        
#     }
# }




input {
	file {
		path => "/Users/pratyushshishodiya/Desktop/logstash-8.3.3/event-data/apache-*.log"
		start_position => "beginning"
	}

	file {
		path => "/Users/pratyushshishodiya/Desktop/logstash-8.3.3/event-data/java_errors.log"
		start_position => "beginning"

		codec => multiline {
			pattern => "^%{CATALINA_DATESTAMP}"
			negate => true
			what => "previous"
			auto_flush_interval => 5
   		}
	}
}

filter {
	if [headers][request_path] =~ "error" or [path] =~ "errors" {
		mutate {
			replace => { type => "error" }
		}
        grok {
			match => { "message" => "%{CATALINA_DATESTAMP:[@metadata][timestamp]} %{LOGLEVEL:level} %{JAVACLASS:class}: (?<msg>.+?(?=(\r\n|\r|\n)))" }
		}

		date {
			match => [ "[@metadata][timestamp]", "MMM dd, yyyy HH:mm:ss a" ]
		}
	} else {
		mutate {
			replace => { type => "access" }
		}

		grok {
			match => { "message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"' }
		}

		if "_grokparsefailure" in [tags] {
			drop { }
		}

		useragent {
			source => "agent"
			target => "ua"
		}

		# Admin pages
		if [request] =~ /^\/admin\// {
			drop { }
		}

		# Static files
		if [request] =~ /^\/js\//
			or [request] =~ /^\/css\//
			or [request] in ["/robots.txt", "/favicon.ico"] {
			drop { }
		}

		# Crawlers
		if [ua][device] == "Spider" {
			drop { }
		}

		mutate {
			convert => {
				"response" => "integer"
				"bytes" => "integer"
			}
		}

		date {
			match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
			remove_field => [ "timestamp" ]
		}

		#geoip {
		#	source => "clientip"
		#}
	}

	mutate {
		remove_field => [ "headers", "@version", "host" ]
	}
}

output {
	if [type] == "access" {
		elasticsearch {
			hosts => ["localhost:9200"]
			document_type => "default"
			index => "%{type}-%{+YYYY.MM.dd}"
			http_compression => true
		}
	} else {
		stdout {
			codec => rubydebug{
                metadata=>true
            }
		}
	}
}